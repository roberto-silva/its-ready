name: CI/CD Pipeline
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - development
      - ci-cd
  pull_request:
    branches:
      - master
      - development
      - ci-cd
      - 'releases/**'
jobs:
  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Tests
        working-directory: ./back-end/TaProntoAPI
        run: mvn -B test
  build:
    #Depends on sonar's job
    needs: tests
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        working-directory: ./back-end/TaProntoAPI
        run: mvn -B package -DskipTests --file pom.xml
      - name: Upload JAR
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ./back-end/TaProntoAPI/target/TaProntoAPI-0.0.1-SNAPSHOT.jar
  deploy:
    deploy:
      runs-on: ubuntu-latest
      steps:
        - name: Get Github action IP
          id: ip
          uses: haythem/public-ip@v1.2

        - name: AWS configure
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

        - name: Add github actions IP to security group
          env:
            AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
          run: |
            aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/16
            sleep 10
        - name: Deploy on AWS EC2
          env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
            HOSTNAME: ${{ secrets.HOSTNAME  }}
            USER_NAME: ${{ secrets.USERNAME  }}
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          run: |
            echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
            ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
              rm -rf /home/ubuntu/<your-repo-name>
              git clone <your-repo-link>.git
              cd <your-repo>
              git checkout master
              git pull origin master
              sudo chmod +x ./deploy.sh
              ./deploy.sh
            '
            rm -rf private_key.pem
        - name: Remove github actions IP from security group
          env:
            AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
          run: |
            aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/16
          if: always()
